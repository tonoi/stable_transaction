@page "/travel-wallet"
@using OfflineGuide.Services.Travel
@inject IWalletService WalletService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<div class="wallet-container">
    <div class="wallet-header">
        <h1>@AppResources.Wallet</h1>
        <p class="subtitle">デジタルウォレット / Digital Wallet Management</p>
    </div>

    <div class="wallet-content">
        <!-- Total Balance Summary -->
        <div class="balance-summary">
            <div class="summary-card">
                <h3>総残高 / Total Balance</h3>
                <div class="total-amount">¥@totalBalance.ToString("N0")</div>
                <p class="balance-note">接続済みアカウントの残高合計 / Total from connected accounts</p>
            </div>
        </div>

        <!-- Account Management -->
        <div class="accounts-section">
            <h2>アカウント管理 / Account Management</h2>
            
            @if (walletAccounts.Any())
            {
                <div class="accounts-grid">
                    @foreach (var account in walletAccounts)
                    {
                        <div class="account-card @(account.IsConnected ? "connected" : "disconnected")">
                            <div class="account-header">
                                <div class="account-icon">
                                    <i class="@GetAccountIcon(account.Type)"></i>
                                </div>
                                <div class="account-status">
                                    <span class="status-badge @(account.IsConnected ? "connected" : "disconnected")">
                                        @(account.IsConnected ? "接続済み / Connected" : "未接続 / Disconnected")
                                    </span>
                                </div>
                            </div>
                            
                            <div class="account-details">
                                <h3>@account.Name</h3>
                                <p class="account-type">@GetAccountTypeDisplayName(account.Type)</p>
                                
                                @if (account.IsConnected)
                                {
                                    <div class="balance-info">
                                        <span class="balance-label">残高 / Balance:</span>
                                        <span class="balance-amount">¥@account.Balance.ToString("N0")</span>
                                    </div>
                                    <div class="last-updated">
                                        <i class="bi bi-clock"></i>
                                        最終更新 / Last Updated: @account.LastUpdated.ToString("MM/dd HH:mm")
                                    </div>
                                }
                                else
                                {
                                    <div class="connect-message">
                                        <p>アカウントを接続して残高を確認しましょう</p>
                                        <p>Connect your account to view balance</p>
                                    </div>
                                }
                            </div>
                            
                            <div class="account-actions">
                                @if (account.IsConnected)
                                {
                                    <button class="btn btn-primary" @onclick="() => ProcessPayment(account.Id)">
                                        <i class="bi bi-credit-card"></i>
                                        @AppResources.Payment
                                    </button>
                                    <button class="btn btn-secondary" @onclick="() => ViewTransactions(account.Id)">
                                        <i class="bi bi-list-ul"></i>
                                        履歴 / History
                                    </button>
                                    <button class="btn btn-warning" @onclick="() => DisconnectAccount(account.Id)">
                                        <i class="bi bi-unlink"></i>
                                        切断 / Disconnect
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-success" @onclick="() => ConnectAccount(account.Type)">
                                        <i class="bi bi-link-45deg"></i>
                                        接続 / Connect
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="bi bi-wallet"></i>
                    <h3>アカウントが見つかりません / No Accounts Found</h3>
                    <p>ウォレットアカウントを追加してください。</p>
                    <p>Please add wallet accounts to get started.</p>
                    <button class="btn btn-primary" @onclick="AddNewAccount">
                        <i class="bi bi-plus-circle"></i>
                        アカウント追加 / Add Account
                    </button>
                </div>
            }
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <h3>クイックアクション / Quick Actions</h3>
            <div class="action-buttons">
                <button class="btn btn-info" @onclick="RefreshBalances">
                    <i class="bi bi-arrow-clockwise"></i>
                    残高更新 / Refresh Balances
                </button>
                <button class="btn btn-secondary" @onclick="ViewAllTransactions">
                    <i class="bi bi-receipt"></i>
                    全取引履歴 / All Transactions
                </button>
                <button class="btn btn-primary" @onclick="AddNewAccount">
                    <i class="bi bi-plus-circle"></i>
                    アカウント追加 / Add Account
                </button>
            </div>
        </div>
    </div>

    <div class="back-button-container">
        <button class="btn btn-secondary" @onclick="GoBack">
            <i class="bi bi-arrow-left"></i>
            ダッシュボードに戻る / Back to Dashboard
        </button>
    </div>
</div>

@code {
    private List<WalletAccount> walletAccounts = new();
    private decimal totalBalance = 0;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadWalletData();
    }

    private async Task LoadWalletData()
    {
        walletAccounts = await WalletService.GetAccountsAsync();
        CalculateTotalBalance();
    }

    private void CalculateTotalBalance()
    {
        totalBalance = walletAccounts.Where(a => a.IsConnected).Sum(a => a.Balance);
    }

    private async Task ConnectAccount(string accountType)
    {
        var success = await WalletService.ConnectAccountAsync(accountType);
        if (success)
        {
            await LoadWalletData();
            // TODO: Show success message
        }
        else
        {
            // TODO: Show error message
        }
    }

    private async Task DisconnectAccount(string accountId)
    {
        var success = await WalletService.DisconnectAccountAsync(accountId);
        if (success)
        {
            await LoadWalletData();
            // TODO: Show success message
        }
        else
        {
            // TODO: Show error message
        }
    }

    private void ProcessPayment(string accountId)
    {
        Navigation.NavigateTo($"/payment?accountId={accountId}");
    }

    private void ViewTransactions(string accountId)
    {
        Navigation.NavigateTo($"/transactions?accountId={accountId}");
    }

    private void ViewAllTransactions()
    {
        Navigation.NavigateTo("/transactions");
    }

    private async Task RefreshBalances()
    {
        await LoadWalletData();
        // TODO: Show refresh message
    }

    private void AddNewAccount()
    {
        Navigation.NavigateTo("/add-account");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private string GetAccountIcon(string accountType)
    {
        return accountType switch
        {
            "MyNumberCard" => "bi bi-person-badge",
            "Suica" => "bi bi-train-front",
            "Google" => "bi bi-google",
            "Microsoft" => "bi bi-microsoft",
            "CreditCard" => "bi bi-credit-card",
            "BankAccount" => "bi bi-bank",
            _ => "bi bi-wallet2"
        };
    }

    private string GetAccountTypeDisplayName(string accountType)
    {
        return accountType switch
        {
            "MyNumberCard" => "マイナンバーカード / My Number Card",
            "Suica" => "Suica / IC Card",
            "Google" => "Google Pay",
            "Microsoft" => "Microsoft Account",
            "CreditCard" => "クレジットカード / Credit Card",
            "BankAccount" => "銀行口座 / Bank Account",
            _ => "その他 / Other"
        };
    }
}

<style>
    .wallet-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        padding-bottom: 100px; /* Space for floating profile icon */
    }

    .wallet-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        text-align: center;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .wallet-header h1 {
        color: #333;
        margin-bottom: 0.5rem;
        font-size: 2.5rem;
        font-weight: bold;
    }

    .subtitle {
        color: #666;
        font-size: 1.1rem;
        margin: 0;
    }

    .wallet-content {
        max-width: 1200px;
        margin: 0 auto;
    }

    .balance-summary {
        margin-bottom: 3rem;
    }

    .summary-card {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .summary-card h3 {
        margin-bottom: 1rem;
        font-size: 1.3rem;
        opacity: 0.9;
    }

    .total-amount {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .balance-note {
        margin: 0;
        opacity: 0.8;
        font-size: 0.95rem;
    }

    .accounts-section {
        margin-bottom: 3rem;
    }

    .accounts-section h2 {
        color: white;
        margin-bottom: 1.5rem;
        font-size: 1.8rem;
        text-align: center;
    }

    .accounts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
    }

    .account-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .account-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0,0,0,0.15);
    }

    .account-card.connected {
        border-left: 5px solid #28a745;
    }

    .account-card.disconnected {
        border-left: 5px solid #dc3545;
    }

    .account-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem 1rem 2rem;
        background-color: #f8f9fa;
    }

    .account-icon i {
        font-size: 2rem;
        color: #007bff;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
    }

    .status-badge.connected {
        background-color: #d4edda;
        color: #155724;
    }

    .status-badge.disconnected {
        background-color: #f8d7da;
        color: #721c24;
    }

    .account-details {
        padding: 2rem;
    }

    .account-details h3 {
        color: #333;
        margin-bottom: 0.5rem;
        font-size: 1.3rem;
    }

    .account-type {
        color: #666;
        margin-bottom: 1.5rem;
        font-size: 0.95rem;
    }

    .balance-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: #e8f5e8;
        border-radius: 8px;
    }

    .balance-label {
        color: #666;
        font-weight: bold;
    }

    .balance-amount {
        color: #28a745;
        font-size: 1.2rem;
        font-weight: bold;
    }

    .last-updated {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #999;
        font-size: 0.85rem;
        margin-bottom: 1.5rem;
    }

    .connect-message {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
    }

    .connect-message p {
        margin: 0.25rem 0;
        color: #856404;
        font-size: 0.9rem;
    }

    .account-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        padding: 0 2rem 2rem 2rem;
    }

    .btn {
        padding: 0.75rem 1rem;
        border: none;
        border-radius: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        flex: 1;
        justify-content: center;
        min-width: 120px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,123,255,0.3);
    }

    .btn-secondary {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: white;
    }

    .btn-secondary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(108,117,125,0.3);
    }

    .btn-success {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
    }

    .btn-success:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40,167,69,0.3);
    }

    .btn-warning {
        background: linear-gradient(135deg, #ffc107, #e0a800);
        color: #212529;
    }

    .btn-warning:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255,193,7,0.3);
    }

    .btn-info {
        background: linear-gradient(135deg, #17a2b8, #138496);
        color: white;
    }

    .btn-info:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(23,162,184,0.3);
    }

    .quick-actions {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        text-align: center;
        margin-bottom: 2rem;
    }

    .quick-actions h3 {
        color: #333;
        margin-bottom: 1.5rem;
        font-size: 1.3rem;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .empty-state {
        background: white;
        text-align: center;
        padding: 4rem 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .empty-state i {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

    .empty-state h3 {
        color: #333;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }

    .empty-state p {
        color: #666;
        margin-bottom: 1rem;
        font-size: 1.1rem;
    }

    .back-button-container {
        text-align: center;
        margin-top: 2rem;
    }

    @@media (max-width: 768px) {
        .wallet-container {
            padding: 1rem;
        }

        .accounts-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .wallet-header h1 {
            font-size: 2rem;
        }

        .total-amount {
            font-size: 2.5rem;
        }

        .account-actions, .action-buttons {
            flex-direction: column;
        }

        .btn {
            flex: none;
        }
    }
</style> 
